/** 
    Display.jack
    responsible for all the drawings in the game
*/
class Display {

    static int memAddress;

    // Draw game panel showing on the side of the game
    function void draw_game_panel(int current_level) {
        do Output.moveCursor(0, 0);
        do Output.printString("****************");

        do Output.moveCursor(2, 3);
        do Output.printString("Don't Touch");
        do Output.moveCursor(3, 5);
        do Output.printString("the Wall");

        do Output.moveCursor(5, 0);
        do Output.printString("****************");

        do Screen.setColor(true);
        do Screen.drawCircle(64, 108, 32);
        do Screen.setColor(false);
        do Screen.drawCircle(64, 108, 30);
        do Display.draw_black_L((32 * 88) +3);
        do Display.draw_black_V((32 * 88) +4);
        
        if (current_level = 1) {
            do Display.draw_1((32 * 112) +3);
        }
        else {
            if (current_level = 2) {
                do Display.draw_2((32 * 112) +3);
            }
            else {
                do Display.draw_3((32 * 112) +3);
            }
        }
        

        do Output.moveCursor(14, 3);
        do Output.printString("Time:");

        do Output.moveCursor(16, 3);
        do Output.printString("[R]estart");

        do Output.moveCursor(18, 3);
        do Output.printString("[Q]uit");

        return;
    }
    
    function void draw_time(int time) {
        do Output.moveCursor(14, 10);
        if (time > 9) { 
            do Output.printInt(time);
        }
        else {
            do Output.printInt(0);
            do Output.moveCursor(14, 11);
            do Output.printInt(time);
        }
        return;
    }

    function void draw_title(int location) {
        do Screen.clearScreen();
        do Screen.setColor(true);
        do Screen.drawRectangle(100, 75, 420, 195);
        do Screen.setColor(false);
        do Screen.drawRectangle(104, 79, 416, 191);

        do Display.draw_D(location);
        do Display.draw_o(location + 1);
        do Display.draw_n(location + 2);
        do Display.draw_t(location + 3);
        do Display.draw_T(location + 4);
        do Display.draw_o(location + 5);
        do Display.draw_u(location + 6);
        do Display.draw_c(location + 7);
        do Display.draw_h(location + 8);
        do Display.draw_t(location + 9);
        do Display.draw_h(location + 10);
        do Display.draw_e(location + 11);
        do Display.draw_V(location + 12);
        do Display.draw_V(location + 13);
        do Display.draw_a(location + 14);
        do Display.draw_l(location + 15);
        do Display.draw_l(location + 16);

        do Output.moveCursor(12,20);
        do Output.printString("Press S to Start the game");

        do Output.moveCursor(14,20);
        do Output.printString("Press H for help");

        do Output.moveCursor(22,59);
        do Output.printString("v1.0");
        return;
    }

    function void draw_help() {
        do Screen.clearScreen();
        do Screen.setColor(true);
        do Screen.drawRectangle(10, 10, 501, 246);
        do Screen.setColor(false);
        do Screen.drawRectangle(14, 14, 497, 242);

        do Output.moveCursor(2,4);
        do Output.printString("The game is created by Ying Tu as a Nand2Tetris project");
        do Output.moveCursor(6,4);
        do Output.printString("Don't Touch the Wall has 3 levels:");
        do Output.moveCursor(8,4);
        do Output.printString("Level 1: An easy warm up. No big deal.");
        do Output.moveCursor(9,4);
        do Output.printString("Level 2: Super hard! Pass it the first try is crazy.");
        do Output.moveCursor(10,4);
        do Output.printString("Level 3: Rhythm is everything!");
        do Output.moveCursor(13,4);
        do Output.printString("In each level there's a timer, make sure to reach finish");
        do Output.moveCursor(14,4);
        do Output.printString("before time's up.");
        do Output.moveCursor(16,4);
        do Output.printString("And finally, Have fun with the game!");
        do Output.moveCursor(17,4);
        do Output.printString("(There's a hidden cheat button but I won't tell you.)");
        do Output.moveCursor(20,35);
        do Output.printString("Press S to Start the game");
        return;
    }

    function void draw_before_start() {
        do Screen.clearScreen();
        do Screen.setColor(true);
        do Screen.drawRectangle(136, 88, 366, 140);
        do Screen.setColor(false);
        do Screen.drawRectangle(140, 92, 362, 136);
        do Output.moveCursor(10,20);
        do Output.printString("Press Spacebar to Start");
        return;
    }

    function void draw_pass_level(int current_level) {
        do Screen.setColor(true);
        do Screen.drawRectangle(180, 80, 440, 200);
        do Screen.setColor(false);
        do Screen.drawRectangle(184, 84, 436, 196);
        
        do Output.moveCursor(10,26);
        do Output.printString("Congradulations!");
        do Output.moveCursor(12,26);
        do Output.printString("Press R to restart");
        
        if (~(current_level = 3)) {
            do Output.moveCursor(14,26);
            do Output.printString("Press Spacebar to continue.");
        }
        else {
            do Output.moveCursor(14,26);
            do Output.printString("Press Spacebar to start");
            do Output.moveCursor(15,26);
            do Output.printString("from Level 1");
        }
        return;
    }

    function void draw_game_over() {
        do Screen.setColor(true);
        do Screen.drawRectangle(200, 80, 420, 170);
        do Screen.setColor(false);
        do Screen.drawRectangle(204, 84, 416, 166);

        do Output.moveCursor(10,30);
        do Output.printString("Game Over");
        do Output.moveCursor(12,30);
        do Output.printString("Press R to restart");
        return;
    }

    function void draw_D(int location) {

        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 2047);
        do Memory.poke(memAddress+32, 3073);
        do Memory.poke(memAddress+64, 6145);
        do Memory.poke(memAddress+96, 4097);
        do Memory.poke(memAddress+128, 12785);
        do Memory.poke(memAddress+160, 8721);
        do Memory.poke(memAddress+192, 8721);
        do Memory.poke(memAddress+224, 8721);
        do Memory.poke(memAddress+256, 8721);
        do Memory.poke(memAddress+288, 8721);
        do Memory.poke(memAddress+320, 8721);
        do Memory.poke(memAddress+352, 12785);
        do Memory.poke(memAddress+384, 4097);
        do Memory.poke(memAddress+416, 6145);
        do Memory.poke(memAddress+448, 3073);
        do Memory.poke(memAddress+480, 2047);
        return;
    }

    function void draw_o(int location) {

        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 0);
        do Memory.poke(memAddress+192, 2032);
        do Memory.poke(memAddress+224, 3096);
        do Memory.poke(memAddress+256, 2056);
        do Memory.poke(memAddress+288, 2504);
        do Memory.poke(memAddress+320, 2376);
        do Memory.poke(memAddress+352, 2376);
        do Memory.poke(memAddress+384, 2504);
        do Memory.poke(memAddress+416, 2056);
        do Memory.poke(memAddress+448, 3096);
        do Memory.poke(memAddress+480, 2032);
        return;
    }

    function void draw_n(int location) {

        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 4088);
        do Memory.poke(memAddress+192, 6156);
        do Memory.poke(memAddress+224, 4100);
        do Memory.poke(memAddress+256, 4548);
        do Memory.poke(memAddress+288, 4644);
        do Memory.poke(memAddress+320, 4644);
        do Memory.poke(memAddress+352, 4644);
        do Memory.poke(memAddress+384, 4644);
        do Memory.poke(memAddress+416, 4644);
        do Memory.poke(memAddress+448, 4644);
        do Memory.poke(memAddress+480, 7740);
        return;
    }

    function void draw_t(int location) {

        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 480);
        do Memory.poke(memAddress+64, 288);
        do Memory.poke(memAddress+96, 288);
        do Memory.poke(memAddress+128, 7998);
        do Memory.poke(memAddress+160, 4098);
        do Memory.poke(memAddress+192, 4098);
        do Memory.poke(memAddress+224, 7998);
        do Memory.poke(memAddress+256, 288);
        do Memory.poke(memAddress+288, 288);
        do Memory.poke(memAddress+320, 288);
        do Memory.poke(memAddress+352, 288);
        do Memory.poke(memAddress+384, 16160);
        do Memory.poke(memAddress+416, 8224);
        do Memory.poke(memAddress+448, 12320);
        do Memory.poke(memAddress+480, 8160);
        return;
    }

    function void draw_T(int location) {

        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 32766);
        do Memory.poke(memAddress+32, 16386);
        do Memory.poke(memAddress+64, 16386);
        do Memory.poke(memAddress+96, 32382);
        do Memory.poke(memAddress+128, 576);
        do Memory.poke(memAddress+160, 576);
        do Memory.poke(memAddress+192, 576);
        do Memory.poke(memAddress+224, 576);
        do Memory.poke(memAddress+256, 576);
        do Memory.poke(memAddress+288, 576);
        do Memory.poke(memAddress+320, 576);
        do Memory.poke(memAddress+352, 576);
        do Memory.poke(memAddress+384, 576);
        do Memory.poke(memAddress+416, 576);
        do Memory.poke(memAddress+448, 576);
        do Memory.poke(memAddress+480, 960);
        return;
    }

    function void draw_u(int location) {

        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 0);
        do Memory.poke(memAddress+192, 7740);
        do Memory.poke(memAddress+224, 4644);
        do Memory.poke(memAddress+256, 4644);
        do Memory.poke(memAddress+288, 4644);
        do Memory.poke(memAddress+320, 4644);
        do Memory.poke(memAddress+352, 4964);
        do Memory.poke(memAddress+384, 4548);
        do Memory.poke(memAddress+416, 4100);
        do Memory.poke(memAddress+448, 6156);
        do Memory.poke(memAddress+480, 4088);
        return;
    }

    function void draw_c(int location) {

        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 8176);
        do Memory.poke(memAddress+192, 4120);
        do Memory.poke(memAddress+224, 4104);
        do Memory.poke(memAddress+256, 8072);
        do Memory.poke(memAddress+288, 200);
        do Memory.poke(memAddress+320, 72);
        do Memory.poke(memAddress+352, 200);
        do Memory.poke(memAddress+384, 8072);
        do Memory.poke(memAddress+416, 4104);
        do Memory.poke(memAddress+448, 4120);
        do Memory.poke(memAddress+480, 8176);
        return;
    }

    function void draw_h(int location) {

        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 30);
        do Memory.poke(memAddress+64, 18);
        do Memory.poke(memAddress+96, 18);
        do Memory.poke(memAddress+128, 18);
        do Memory.poke(memAddress+160, 18);
        do Memory.poke(memAddress+192, 18);
        do Memory.poke(memAddress+224, 2002);
        do Memory.poke(memAddress+256, 3122);
        do Memory.poke(memAddress+288, 6162);
        do Memory.poke(memAddress+320, 4546);
        do Memory.poke(memAddress+352, 4642);
        do Memory.poke(memAddress+384, 4626);
        do Memory.poke(memAddress+416, 4626);
        do Memory.poke(memAddress+448, 4626);
        do Memory.poke(memAddress+480, 7710);
        return;
    }

    function void draw_e(int location) {

        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 2032);
        do Memory.poke(memAddress+192, 3096);
        do Memory.poke(memAddress+224, 6596);
        do Memory.poke(memAddress+256, 5092);
        do Memory.poke(memAddress+288, 6148);
        do Memory.poke(memAddress+320, 2020);
        do Memory.poke(memAddress+352, 36);
        do Memory.poke(memAddress+384, 8164);
        do Memory.poke(memAddress+416, 4108);
        do Memory.poke(memAddress+448, 8184);
        do Memory.poke(memAddress+480, 0);
        return;
    }

    function void draw_V(int location) {
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, -4081);
        do Memory.poke(memAddress+32, -28663);
        do Memory.poke(memAddress+64, -26599);
        do Memory.poke(memAddress+96, -14317);
        do Memory.poke(memAddress+128, 18450);
        do Memory.poke(memAddress+160, 19506);
        do Memory.poke(memAddress+192, 25634);
        do Memory.poke(memAddress+224, 9830);
        do Memory.poke(memAddress+256, 12868);
        do Memory.poke(memAddress+288, 4676);
        do Memory.poke(memAddress+320, 6540);
        do Memory.poke(memAddress+352, 2440);
        do Memory.poke(memAddress+384, 3096);
        do Memory.poke(memAddress+416, 1040);
        do Memory.poke(memAddress+448, 1584);
        do Memory.poke(memAddress+480, 448);
        return;
    }

    function void draw_a(int location) {
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 0);
        do Memory.poke(memAddress+192, 8184);
        do Memory.poke(memAddress+224, 12300);
        do Memory.poke(memAddress+256, 8196);
        do Memory.poke(memAddress+288, 9188);
        do Memory.poke(memAddress+320, 25124);
        do Memory.poke(memAddress+352, 16932);
        do Memory.poke(memAddress+384, 16868);
        do Memory.poke(memAddress+416, 18436);
        do Memory.poke(memAddress+448, 19980);
        do Memory.poke(memAddress+480, 12792);
        return;
    }

    function void draw_l(int location) {
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 480);
        do Memory.poke(memAddress+32, 288);
        do Memory.poke(memAddress+64, 288);
        do Memory.poke(memAddress+96, 288);
        do Memory.poke(memAddress+128, 288);
        do Memory.poke(memAddress+160, 288);
        do Memory.poke(memAddress+192, 288);
        do Memory.poke(memAddress+224, 288);
        do Memory.poke(memAddress+256, 288);
        do Memory.poke(memAddress+288, 288);
        do Memory.poke(memAddress+320, 288);
        do Memory.poke(memAddress+352, 288);
        do Memory.poke(memAddress+384, 288);
        do Memory.poke(memAddress+416, 288);
        do Memory.poke(memAddress+448, 288);
        do Memory.poke(memAddress+480, 480);
        return;
    }

    function void draw_black_L(int location) {
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 112);
        do Memory.poke(memAddress+64, 112);
        do Memory.poke(memAddress+96, 112);
        do Memory.poke(memAddress+128, 112);
        do Memory.poke(memAddress+160, 112);
        do Memory.poke(memAddress+192, 112);
        do Memory.poke(memAddress+224, 112);
        do Memory.poke(memAddress+256, 112);
        do Memory.poke(memAddress+288, 112);
        do Memory.poke(memAddress+320, 112);
        do Memory.poke(memAddress+352, 112);
        do Memory.poke(memAddress+384, 112);
        do Memory.poke(memAddress+416, -16);
        do Memory.poke(memAddress+448, -16);
        do Memory.poke(memAddress+480, 32736);
        return;
    }

    function void draw_black_V(int location) {
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, -4081);
        do Memory.poke(memAddress+32, -4081);
        do Memory.poke(memAddress+64, -2017);
        do Memory.poke(memAddress+96, -2017);
        do Memory.poke(memAddress+128, 30750);
        do Memory.poke(memAddress+160, 31806);
        do Memory.poke(memAddress+192, 15420);
        do Memory.poke(memAddress+224, 15420);
        do Memory.poke(memAddress+256, 7800);
        do Memory.poke(memAddress+288, 7800);
        do Memory.poke(memAddress+320, 3696);
        do Memory.poke(memAddress+352, 4080);
        do Memory.poke(memAddress+384, 2016);
        do Memory.poke(memAddress+416, 2016);
        do Memory.poke(memAddress+448, 960);
        do Memory.poke(memAddress+480, 960);
        return;
    }

    function void draw_1(int location) {
        // left part
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, -8192);
        do Memory.poke(memAddress+32, -4096);
        do Memory.poke(memAddress+64, -2048);
        do Memory.poke(memAddress+96, -2048);
        do Memory.poke(memAddress+128, -2048);
        do Memory.poke(memAddress+160, 0);
        do Memory.poke(memAddress+192, 0);
        do Memory.poke(memAddress+224, 0);
        do Memory.poke(memAddress+256, 0);
        do Memory.poke(memAddress+288, 0);
        do Memory.poke(memAddress+320, 0);
        do Memory.poke(memAddress+352, 0);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, -2048);
        do Memory.poke(memAddress+448, -2048);
        do Memory.poke(memAddress+480, -2048);
        // right part
        let memAddress = memAddress + 1;
        do Memory.poke(memAddress+0, 15);
        do Memory.poke(memAddress+32, 15);
        do Memory.poke(memAddress+64, 15);
        do Memory.poke(memAddress+96, 15);
        do Memory.poke(memAddress+128, 15);
        do Memory.poke(memAddress+160, 15);
        do Memory.poke(memAddress+192, 15);
        do Memory.poke(memAddress+224, 15);
        do Memory.poke(memAddress+256, 15);
        do Memory.poke(memAddress+288, 15);
        do Memory.poke(memAddress+320, 15);
        do Memory.poke(memAddress+352, 15);
        do Memory.poke(memAddress+384, 15);
        do Memory.poke(memAddress+416, 511);
        do Memory.poke(memAddress+448, 511);
        do Memory.poke(memAddress+480, 511);
        return;
    }

    function void draw_2(int location) {
        // left part
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, -16384);
        do Memory.poke(memAddress+32, -8192);
        do Memory.poke(memAddress+64, -4096);
        do Memory.poke(memAddress+96, -2048);
        do Memory.poke(memAddress+128, 30720);
        do Memory.poke(memAddress+160, 14336);
        do Memory.poke(memAddress+192, 0);
        do Memory.poke(memAddress+224, -8192);
        do Memory.poke(memAddress+256, -4096);
        do Memory.poke(memAddress+288, -2048);
        do Memory.poke(memAddress+320, 30720);
        do Memory.poke(memAddress+352, 14336);
        do Memory.poke(memAddress+384, 14336);
        do Memory.poke(memAddress+416, -2048);
        do Memory.poke(memAddress+448, -2048);
        do Memory.poke(memAddress+480, -2048);
        // right part
        let memAddress = memAddress + 1;
        do Memory.poke(memAddress+0, 127);
        do Memory.poke(memAddress+32, 255);
        do Memory.poke(memAddress+64, 511);
        do Memory.poke(memAddress+96, 480);
        do Memory.poke(memAddress+128, 448);
        do Memory.poke(memAddress+160, 448);
        do Memory.poke(memAddress+192, 480);
        do Memory.poke(memAddress+224, 511);
        do Memory.poke(memAddress+256, 255);
        do Memory.poke(memAddress+288, 127);
        do Memory.poke(memAddress+320, 0);
        do Memory.poke(memAddress+352, 0);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, 511);
        do Memory.poke(memAddress+448, 511);
        do Memory.poke(memAddress+480, 511);
        return;
    }

    function void draw_3(int location) {
        // left part
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, -4096);
        do Memory.poke(memAddress+32, -4096);
        do Memory.poke(memAddress+64, -4096);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 0);
        do Memory.poke(memAddress+192, 0);
        do Memory.poke(memAddress+224, -4096);
        do Memory.poke(memAddress+256, -4096);
        do Memory.poke(memAddress+288, -4096);
        do Memory.poke(memAddress+320, 0);
        do Memory.poke(memAddress+352, 0);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, -4096);
        do Memory.poke(memAddress+448, -4096);
        do Memory.poke(memAddress+480, -4096);
        // right part
        let memAddress = memAddress + 1;
        do Memory.poke(memAddress+0, 511);
        do Memory.poke(memAddress+32, 511);
        do Memory.poke(memAddress+64, 511);
        do Memory.poke(memAddress+96, 448);
        do Memory.poke(memAddress+128, 448);
        do Memory.poke(memAddress+160, 448);
        do Memory.poke(memAddress+192, 448);
        do Memory.poke(memAddress+224, 511);
        do Memory.poke(memAddress+256, 511);
        do Memory.poke(memAddress+288, 511);
        do Memory.poke(memAddress+320, 448);
        do Memory.poke(memAddress+352, 448);
        do Memory.poke(memAddress+384, 448);
        do Memory.poke(memAddress+416, 511);
        do Memory.poke(memAddress+448, 511);
        do Memory.poke(memAddress+480, 511);
        return;
    }

    function void draw_upArrow(int location) {
        // upper part
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 960);
        do Memory.poke(memAddress+32, 2016);
        do Memory.poke(memAddress+64, 4080);
        do Memory.poke(memAddress+96, 7224);
        do Memory.poke(memAddress+128, 14364);
        do Memory.poke(memAddress+160, 28686);
        do Memory.poke(memAddress+192, -8185);
        do Memory.poke(memAddress+224, -16381);
        do Memory.poke(memAddress+256, -13261);
        do Memory.poke(memAddress+288, -961);
        do Memory.poke(memAddress+320, -961);
        do Memory.poke(memAddress+352, 7224);
        do Memory.poke(memAddress+384, 7224);
        do Memory.poke(memAddress+416, 7224);
        do Memory.poke(memAddress+448, 7224);
        do Memory.poke(memAddress+480, 7224);
        // lower part
        let memAddress = memAddress + (32*16);
        do Memory.poke(memAddress+0, 7224);
        do Memory.poke(memAddress+32, 7224);
        do Memory.poke(memAddress+64, 7224);
        do Memory.poke(memAddress+96, 7224);
        do Memory.poke(memAddress+128, 7224);
        do Memory.poke(memAddress+160, 7224);
        do Memory.poke(memAddress+192, 7224);
        do Memory.poke(memAddress+224, 7224);
        do Memory.poke(memAddress+256, 7224);
        do Memory.poke(memAddress+288, 7224);
        do Memory.poke(memAddress+320, 7224);
        do Memory.poke(memAddress+352, 7224);
        do Memory.poke(memAddress+384, 7224);
        do Memory.poke(memAddress+416, 8184);
        do Memory.poke(memAddress+448, 8184);
        do Memory.poke(memAddress+480, 8184);
        return;
    }

    function void draw_downArrow(int location) {
        // upper part
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 8184);
        do Memory.poke(memAddress+32, 8184);
        do Memory.poke(memAddress+64, 8184);
        do Memory.poke(memAddress+96, 7224);
        do Memory.poke(memAddress+128, 7224);
        do Memory.poke(memAddress+160, 7224);
        do Memory.poke(memAddress+192, 7224);
        do Memory.poke(memAddress+224, 7224);
        do Memory.poke(memAddress+256, 7224);
        do Memory.poke(memAddress+288, 7224);
        do Memory.poke(memAddress+320, 7224);
        do Memory.poke(memAddress+352, 7224);
        do Memory.poke(memAddress+384, 7224);
        do Memory.poke(memAddress+416, 7224);
        do Memory.poke(memAddress+448, 7224);
        do Memory.poke(memAddress+480, 7224);
        // lower part
        let memAddress = memAddress + (32*16);
        do Memory.poke(memAddress+0, 7224);
        do Memory.poke(memAddress+32, 7224);
        do Memory.poke(memAddress+64, 7224);
        do Memory.poke(memAddress+96, 7224);
        do Memory.poke(memAddress+128, 7224);
        do Memory.poke(memAddress+160, -961);
        do Memory.poke(memAddress+192, -961);
        do Memory.poke(memAddress+224, -13261);
        do Memory.poke(memAddress+256, -16381);
        do Memory.poke(memAddress+288, -8185);
        do Memory.poke(memAddress+320, 28686);
        do Memory.poke(memAddress+352, 14364);
        do Memory.poke(memAddress+384, 7224);
        do Memory.poke(memAddress+416, 4080);
        do Memory.poke(memAddress+448, 2016);
        do Memory.poke(memAddress+480, 960);
        return;
    }

    function void draw_leftArrow(int location) {
        // left part
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 1984);
        do Memory.poke(memAddress+32, 2016);
        do Memory.poke(memAddress+64, 1648);
        do Memory.poke(memAddress+96, -456);
        do Memory.poke(memAddress+128, -228);
        do Memory.poke(memAddress+160, -242);
        do Memory.poke(memAddress+192, 7);
        do Memory.poke(memAddress+224, 7);
        do Memory.poke(memAddress+256, 7);
        do Memory.poke(memAddress+288, 7);
        do Memory.poke(memAddress+320, -242);
        do Memory.poke(memAddress+352, -228);
        do Memory.poke(memAddress+384, -456);
        do Memory.poke(memAddress+416, 1648);
        do Memory.poke(memAddress+448, 2016);
        do Memory.poke(memAddress+480, 1984);
        // right part
        let memAddress = memAddress + 1;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 4095);
        do Memory.poke(memAddress+128, 4095);
        do Memory.poke(memAddress+160, 4095);
        do Memory.poke(memAddress+192, 3584);
        do Memory.poke(memAddress+224, 3584);
        do Memory.poke(memAddress+256, 3584);
        do Memory.poke(memAddress+288, 3584);
        do Memory.poke(memAddress+320, 4095);
        do Memory.poke(memAddress+352, 4095);
        do Memory.poke(memAddress+384, 4095);
        do Memory.poke(memAddress+416, 0);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
        return;
    }

    function void draw_rightArrow(int location) {
        // left part
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, -16);
        do Memory.poke(memAddress+128, -16);
        do Memory.poke(memAddress+160, -16);
        do Memory.poke(memAddress+192, 112);
        do Memory.poke(memAddress+224, 112);
        do Memory.poke(memAddress+256, 112);
        do Memory.poke(memAddress+288, 112);
        do Memory.poke(memAddress+320, -16);
        do Memory.poke(memAddress+352, -16);
        do Memory.poke(memAddress+384, -16);
        do Memory.poke(memAddress+416, 0);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
        // right part
        let memAddress = memAddress + 1;
        do Memory.poke(memAddress+0, 992);
        do Memory.poke(memAddress+32, 2016);
        do Memory.poke(memAddress+64, 3680);
        do Memory.poke(memAddress+96, 7295);
        do Memory.poke(memAddress+128, 14591);
        do Memory.poke(memAddress+160, 28927);
        do Memory.poke(memAddress+192, -8192);
        do Memory.poke(memAddress+224, -8192);
        do Memory.poke(memAddress+256, -8192);
        do Memory.poke(memAddress+288, -8192);
        do Memory.poke(memAddress+320, 28927);
        do Memory.poke(memAddress+352, 14591);
        do Memory.poke(memAddress+384, 7295);
        do Memory.poke(memAddress+416, 3680);
        do Memory.poke(memAddress+448, 2016);
        do Memory.poke(memAddress+480, 992);
        return;
    }

    function void draw_black_upArrow(int location) {
        // upper part
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 960);
        do Memory.poke(memAddress+32, 2016);
        do Memory.poke(memAddress+64, 4080);
        do Memory.poke(memAddress+96, 8184);
        do Memory.poke(memAddress+128, 16380);
        do Memory.poke(memAddress+160, 32766);
        do Memory.poke(memAddress+192, -1);
        do Memory.poke(memAddress+224, -1);
        do Memory.poke(memAddress+256, -1);
        do Memory.poke(memAddress+288, -1);
        do Memory.poke(memAddress+320, 4080);
        do Memory.poke(memAddress+352, 4080);
        do Memory.poke(memAddress+384, 4080);
        do Memory.poke(memAddress+416, 4080);
        do Memory.poke(memAddress+448, 4080);
        do Memory.poke(memAddress+480, 4080);
        // lower part
        let memAddress = memAddress + (32*16);
        do Memory.poke(memAddress+0, 4080);
        do Memory.poke(memAddress+32, 4080);
        do Memory.poke(memAddress+64, 4080);
        do Memory.poke(memAddress+96, 4080);
        do Memory.poke(memAddress+128, 4080);
        do Memory.poke(memAddress+160, 4080);
        do Memory.poke(memAddress+192, 4080);
        do Memory.poke(memAddress+224, 4080);
        do Memory.poke(memAddress+256, 4080);
        do Memory.poke(memAddress+288, 4080);
        do Memory.poke(memAddress+320, 4080);
        do Memory.poke(memAddress+352, 4080);
        do Memory.poke(memAddress+384, 4080);
        do Memory.poke(memAddress+416, 4080);
        do Memory.poke(memAddress+448, 4080);
        do Memory.poke(memAddress+480, 4080);
        return;
    }

    function void draw_black_downArrow(int location) {
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 4080);
        do Memory.poke(memAddress+32, 4080);
        do Memory.poke(memAddress+64, 4080);
        do Memory.poke(memAddress+96, 4080);
        do Memory.poke(memAddress+128, 4080);
        do Memory.poke(memAddress+160, 4080);
        do Memory.poke(memAddress+192, 4080);
        do Memory.poke(memAddress+224, 4080);
        do Memory.poke(memAddress+256, 4080);
        do Memory.poke(memAddress+288, 4080);
        do Memory.poke(memAddress+320, 4080);
        do Memory.poke(memAddress+352, 4080);
        do Memory.poke(memAddress+384, 4080);
        do Memory.poke(memAddress+416, 4080);
        do Memory.poke(memAddress+448, 4080);
        do Memory.poke(memAddress+480, 4080);
        // lower part
        let memAddress = memAddress + (32*16);
        do Memory.poke(memAddress+0, 4080);
        do Memory.poke(memAddress+32, 4080);
        do Memory.poke(memAddress+64, 4080);
        do Memory.poke(memAddress+96, 4080);
        do Memory.poke(memAddress+128, 4080);
        do Memory.poke(memAddress+160, 4080);
        do Memory.poke(memAddress+192, -1);
        do Memory.poke(memAddress+224, -1);
        do Memory.poke(memAddress+256, -1);
        do Memory.poke(memAddress+288, -1);
        do Memory.poke(memAddress+320, 32766);
        do Memory.poke(memAddress+352, 16380);
        do Memory.poke(memAddress+384, 8184);
        do Memory.poke(memAddress+416, 4080);
        do Memory.poke(memAddress+448, 2016);
        do Memory.poke(memAddress+480, 960);
        return;
    }

    function void draw_black_leftArrow(int location) {
        // left part
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 960);
        do Memory.poke(memAddress+32, 992);
        do Memory.poke(memAddress+64, 1008);
        do Memory.poke(memAddress+96, 1016);
        do Memory.poke(memAddress+128, -4);
        do Memory.poke(memAddress+160, -2);
        do Memory.poke(memAddress+192, -1);
        do Memory.poke(memAddress+224, -1);
        do Memory.poke(memAddress+256, -1);
        do Memory.poke(memAddress+288, -1);
        do Memory.poke(memAddress+320, -2);
        do Memory.poke(memAddress+352, -4);
        do Memory.poke(memAddress+384, 1016);
        do Memory.poke(memAddress+416, 1008);
        do Memory.poke(memAddress+448, 992);
        do Memory.poke(memAddress+480, 960);
        // right part
        let memAddress = memAddress + 1;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 16383);
        do Memory.poke(memAddress+160, 16383);
        do Memory.poke(memAddress+192, 16383);
        do Memory.poke(memAddress+224, 16383);
        do Memory.poke(memAddress+256, 16383);
        do Memory.poke(memAddress+288, 16383);
        do Memory.poke(memAddress+320, 16383);
        do Memory.poke(memAddress+352, 16383);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, 0);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
        return;
    }

    function void draw_black_rightArrow(int location) {
        // left part
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, -4);
        do Memory.poke(memAddress+160, -4);
        do Memory.poke(memAddress+192, -4);
        do Memory.poke(memAddress+224, -4);
        do Memory.poke(memAddress+256, -4);
        do Memory.poke(memAddress+288, -4);
        do Memory.poke(memAddress+320, -4);
        do Memory.poke(memAddress+352, -4);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, 0);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
        // right part
        let memAddress = memAddress + 1;
        do Memory.poke(memAddress+0, 960);
        do Memory.poke(memAddress+32, 1984);
        do Memory.poke(memAddress+64, 4032);
        do Memory.poke(memAddress+96, 8128);
        do Memory.poke(memAddress+128, 16383);
        do Memory.poke(memAddress+160, 32767);
        do Memory.poke(memAddress+192, -1);
        do Memory.poke(memAddress+224, -1);
        do Memory.poke(memAddress+256, -1);
        do Memory.poke(memAddress+288, -1);
        do Memory.poke(memAddress+320, 32767);
        do Memory.poke(memAddress+352, 16383);
        do Memory.poke(memAddress+384, 8128);
        do Memory.poke(memAddress+416, 4032);
        do Memory.poke(memAddress+448, 1984);
        do Memory.poke(memAddress+480, 960);
        return;
    }
}