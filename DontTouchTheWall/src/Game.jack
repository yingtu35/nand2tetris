/** 
    Game.jack
    represent Don't Touch the Wall game structure
    GameObject.run() controls the flow of the game
*/
class Game {

    field int delay;            // game delay
    
    field Player player;        
    field int start_x;          // Starting x position of player
    field int start_y;          // Starting y position of player
    field int start_r;          // Starting radius of player

    field Map map;              
    field int current_level;    

    field boolean start;        // boolean status for start game menu
    field boolean help;         // boolean status for help display
    field boolean playing;      // boolean status for playing game
    field boolean exit;         // boolean status for exiting the level
    field boolean reset;        // boolean status for reseting the level
    field boolean pass;         // boolean status for passing the level
    field boolean quit;         // boolean status for quitting the game
    field boolean cheat;        // boolean status for cheating

    field int clock;            // indicate clock tick in the system
    field int time;             // remaining time
    field char key;             // keyboard input

    /** Construct a new game */
    constructor Game new() {
        // Create player object
        let start_x = 148;
        let start_y = 20;
        let start_r = 5;
        let player = Player.new(start_x, start_y, start_r);
        // Create level 1 map object
        let current_level = 1;
        let map = Map.new(current_level);

        let delay = 3;
        do run();
        return this;
    }

    /** Dispose the Game object and release the memory */
    method void dispose() {
        do player.dispose();
        do map.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Handle the keyboard input and do response */
    method void handle_input() {
        let key = Keyboard.keyPressed();

        if (key = 0 & (playing)) {                      // No input
            do Display.draw_upArrow((32 * 216) + 1);
            do Display.draw_downArrow((32 * 216) + 2);
            do Display.draw_leftArrow((32 * 224) + 3);
            do Display.draw_rightArrow((32 * 224) + 5);
            do player.draw();
        }

        if (key = 32 & (~playing)) {                    // Space bar
            let playing = true;
        }

        if (key = 67 & (playing)) {                     // "C"
            let cheat = true;
        }

        if (key = 72) {                                 // "H"
            let help = true;
        }
        if (key = 81) {                                 // "Q"
            let start = true;
            let exit = true;
            let quit = true;
        }        
        if (key = 82 & (playing)) {                     // "R"
            let exit = true;
            let reset = true;
        }
        if (key = 83) {                                 // "S"
            let start = true;
        }
        if (key = 130 & (playing)) {                    // "left arrow"
            do player.moveLeft();
            do Display.draw_upArrow((32 * 216) + 1);
            do Display.draw_downArrow((32 * 216) + 2);
            do Display.draw_black_leftArrow((32 * 224) + 3);
            do Display.draw_rightArrow((32 * 224) + 5);
            
        }
        if (key = 131 & (playing)) {                    // "up arrow"
            do player.moveUp();
            do Display.draw_black_upArrow((32 * 216) + 1);
            do Display.draw_downArrow((32 * 216) + 2);
            do Display.draw_leftArrow((32 * 224) + 3);
            do Display.draw_rightArrow((32 * 224) + 5);
            
        }
        if (key = 132 & (playing)) {                    // "right arrow"
            do player.moveRight();
            do Display.draw_upArrow((32 * 216) + 1);
            do Display.draw_downArrow((32 * 216) + 2);
            do Display.draw_leftArrow((32 * 224) + 3);
            do Display.draw_black_rightArrow((32 * 224) + 5);  
        }
        if (key = 133 & (playing)) {                    // "down arrow"
            do player.moveDown();
            do Display.draw_upArrow((32 * 216) + 1);
            do Display.draw_black_downArrow((32 * 216) + 2);
            do Display.draw_leftArrow((32 * 224) + 3);
            do Display.draw_rightArrow((32 * 224) + 5);  
        }
        return;
    }

    /** Run the game */
    method void run() {
        // initialize the variables
        let quit = false;
        let exit = false;
        let reset = false;
        let cheat = false;
        let key = 0;

        // Display introduction graphics
        do Display.draw_title(8 + (32*100));
        while (~(start | help)) {
            do handle_input();
        }

        // Game help
        if (help) {
            do Display.draw_help();
            while (~(start)) {
                do handle_input();
            }
        }

        // Game loop
        while (~quit) {
            // Before playing game
            let playing = false;
            let cheat = false;
            do Display.draw_before_start();

            while (~ (playing | quit)) {
                do handle_input();
            }

            // Draw level layout, player, game panel
            if (~quit){
                do startLevel();
            }

            // Playing game
            let pass = false;
            while (~exit) {
                // game logic
                do update_time();
                do update_map();
                do handle_input();
                do check_hit_wall();
                do check_times_up();
                do check_pass_level();
                do Sys.wait(delay);
            }

            // After playing game
            if (pass){
                do Display.draw_pass_level(current_level);
            }
            else {
                if ((~quit) & (~reset)) {
                    do Display.draw_game_over();
                }
            }

            // Wait to confirm reset, quit, or to continue
            while ((~reset)) {
                let key = Keyboard.keyPressed();
                if (key = 81) {                     // "Q" to quit
                    return;
                }
                if (key = 82) {                     // "R"  to reset
                    let reset = true;
                }
                if ((key = 32) & pass) {            // Space bar to advance
                    let reset = true;
                    if (~(current_level = 3)) {
                        let current_level = current_level + 1;
                    }
                    else {
                        let current_level = 1;
                    } 
                }
            }

            do Sys.wait(200);
        }
        return;
    }

    /** Start the current level */
    method void startLevel() {
        let reset = false;
        let exit = false;
        let time = 40;
        
        do Screen.clearScreen();
        do setPlayer();
        do setMap();
        do Display.draw_game_panel(current_level);
        do Display.draw_time(time);

        do Sys.wait(50);
        return;
    }

    /** Set the position of the player */
    method void setPlayer() {
        do player.set_x(start_x);
        do player.set_y(start_y);
        do player.draw();
        return;
    }

    /** Set the display of the map */
    method void setMap() {
        do map.drawMap(current_level);
        return;
    }

    /** Update remaining time in the game */
    method void update_time() {
        if (~cheat){
            if (clock = 80) {                   // clock is an empirical number
                let clock = 0;
                let time = time - 1;
                do Display.draw_time(time);
            }
            else {
                let clock = clock + 1;
            }
        }
        return;
    }

    /** Update the display of map */
    method void update_map() {
        do map.update(current_level);
        return;
    }

    /** Check if player has hit the wall */
    method void check_hit_wall() {
        if (~cheat){
            if (map.is_player_inside_wall(player)){
                let exit = true;
            }
        }
        return;
    }

    /** Check if time is counted down to 0 */
    method void check_times_up() {
        if (time = 0){
            let exit = true;
        }
        return;
    }

    /** Check if player has pass the level */
    method void check_pass_level() {
        if (map.is_player_pass(player, current_level)){
            let exit = true;
            let pass = true;
        }
        return;
    }

    
}