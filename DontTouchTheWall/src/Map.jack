/** 
    Game.jack
    represent the map object in the game
*/
class Map {
    
    field Array walls;           // array of walls in the map
    field Array blocks;          // array of moveing blocks in the map

    field int number_of_walls;   
    field int number_of_blocks;  

    field int wall_width;      
    field int block_size;        
    
    /** Construct a new map object */
    constructor Map new(int current_level) {
        return this;
    }

    /** Dispose the map object and release the memory */
    // !!!
    method void dispose() {
        var int i;
        var Wall wall;
        var Wall block;
        
        let i = 0;
        while (i < number_of_walls) {
            let wall = walls[i];
            do wall.dispose();
            let i = i + 1;
        }

        let i = 0;
        while (i < number_of_blocks) {
            let block = blocks[i];
            do block.dispose();
            let i = i + 1;
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Draw the map according to the level */
    method void drawMap(int current_level) {
        if (current_level = 1) {
            do drawLevel_1();
        }
        if (current_level = 2) {
            do drawLevel_2();
        }
        if (current_level = 3) {
            do drawLevel_3();
        }
        return;
    }

    /** Draw the level 1 map */
    method void drawLevel_1() {
        var int i;                // to iterate element in the walls array
        var int x;                // locate the x position of a wall
        var int y;                // locate the y position of a wall
        var int spacing;          // specify spacing between walls
        let number_of_walls = 19; 
        let wall_width = 4;      
        let number_of_blocks = 0;
        let spacing = 80;
        let i = 4;

        let walls = Array.new(number_of_walls);
        
        // Draw left border
        let walls[0] = Wall.new(128, 0, (128 + wall_width), 255);
        // Draw right border
        let walls[1] = Wall.new((511 - wall_width), 0, 511, 255);
        // Draw top border
        let walls[2] = Wall.new(128, 0, 511, wall_width);
        // Draw bottom border
        let walls[3] = Wall.new(128, (255 - wall_width), 448, 255);

        // Draw upper vertical walls (4 in total)
        let x = 168;
        let y = 0;
        while (x < 450) {
            let walls[i] = Wall.new(x, y, (x + wall_width), (y + 215));
            let x = x + spacing;
            let i = i + 1;
        }

        // Draw lower vertical walls (4 in total)
        let x = 208;
        let y = 255;
        while (x < 450) {
            let walls[i] = Wall.new(x, (y - 215), (x + wall_width), y);
            let x = x + spacing;
            let i = i + 1;
        }

        let spacing = 64;
        // Draw left horizontal walls (4 in total)
        let x = 448;
        let y = 32;
        while (y < 255) {
            let walls[i] = Wall.new(x, y, (x + 32), (y + wall_width));
            let y = y + spacing;
            let i = i + 1;
        }

        // Draw right horizontal walls (3 in total)
        let x = 480;
        let y = 64;
        while (y < 255) {
            let walls[i] = Wall.new(x, y, 511, (y + wall_width));
            let y = y + spacing;
            let i = i + 1;
        }
        return;
    }

    /** Draw the level 2 map */
    method void drawLevel_2() {             
        let number_of_walls = 18;
        let number_of_blocks = 0;      

        let walls = Array.new(number_of_walls);
        let wall_width = 4;

        // Draw left border
        let walls[0] = Wall.new(128, 0, (128 + wall_width), 255);
        // Draw right border
        let walls[1] = Wall.new((511 - wall_width), 0, 511, 255);
        // Draw top border
        let walls[2] = Wall.new(128, 0, 511, wall_width);
        // Draw bottom border
        let walls[3] = Wall.new(128, (255 - wall_width), 480, 255);

        // first-column blocks
        let wall_width = 32;
        let walls[4] = Wall.new(128, 32, (128 + wall_width), (32 + wall_width));

        let wall_width = 48;
        let walls[5] = Wall.new(128, 64, (128 + wall_width), (64 + wall_width));

        let wall_width = 64;
        let walls[6] = Wall.new(128, 112, (128 + wall_width), (112 + wall_width));
        
        let wall_width = 80;
        let walls[7] = Wall.new(128, 175, (128 + wall_width), (175 + wall_width));

        // second-column blocks
        let wall_width = 32;
        let walls[8] = Wall.new(176, 0, 240, (0 + wall_width));

        let wall_width = 48;
        let walls[9] = Wall.new(192, 32, (192 + wall_width), (32 + wall_width));
        
        let wall_width = 64;
        let walls[10] = Wall.new(208, 80, (208 + wall_width), (80 + wall_width));
        
        let wall_width = 80;
        let walls[11] = Wall.new(224, 144, (224 + wall_width), (144 + wall_width));

        // third-column blocks
        let wall_width = 40;
        let walls[12] = Wall.new(264, 24, (264 + wall_width), (24 + wall_width));

        let wall_width = 64;
        let walls[13] = Wall.new(296, 64, (296 + wall_width), (64 + wall_width));
        
        let wall_width = 80;
        let walls[14] = Wall.new(320, 128, (320 + wall_width), (175 + wall_width));
        
        // last-column blocks
        let walls[15] = Wall.new(324, 0, 511, 44);

        let walls[16] = Wall.new(378, 44, 511, 110);

        let walls[17] = Wall.new(416, 110, 511, 235);
        return;
    }

    /** Draw the level 3 map */
    method void drawLevel_3() {
        let number_of_walls = 6;
        let wall_width = 4;
        let number_of_blocks = 5;
        let block_size = 20;

        let walls = Array.new(number_of_walls);
        let blocks = Array.new(number_of_blocks);

        // Draw left border
        let walls[0] = Wall.new(128, 0, (128 + wall_width), 255);
        // Draw right border
        let walls[1] = Wall.new((511 - wall_width), 0, 511, 255);
        // Draw top border
        let walls[2] = Wall.new(128, 0, 511, wall_width);
        // Draw bottom border
        let walls[3] = Wall.new(128, (255 - wall_width), 480, 255);

        let walls[4] = Wall.new(128, 60, 448, (60 + wall_width));
        let walls[5] = Wall.new(192, 192, 511, (192 + wall_width));

        // Draw blocks
        let blocks[0] = Wall.new_block((128 + wall_width), 64, (128 + wall_width + block_size), (64 + block_size), 2, 0);
        let blocks[1] = Wall.new_block((511 - wall_width - block_size), 91, (511 - wall_width), (91 + block_size), -2, 0);
        let blocks[2] = Wall.new_block((128 + wall_width), 118, (128 + wall_width + block_size), (118 + block_size), 2, 0);
        let blocks[3] = Wall.new_block((511 - wall_width - block_size), 145, (511 - wall_width), (145 + block_size), -2, 0);
        let blocks[4] = Wall.new_block((128 + wall_width), 172, (128 + wall_width + block_size), (172 + block_size), 2, 0);
        return;
    }

    /** Check if the player is inside any walls in the map */
    method boolean is_player_inside_wall(Player player) {
        var Wall wall;
        var Wall block;
        var int i;
        let i = 0;

        while (i < number_of_walls) {
            let wall = walls[i];
            if (wall.is_player_inside_me(player)) {
                return true;
            }
            let i = i + 1;
        }

        let i = 0;
        while (i < number_of_blocks) {
            let block = blocks[i];
            if (block.is_player_inside_me(player)) {
                return true;
            }
            let i = i + 1;
        }
        return false;
    }

    /** Check if player pass the given level */
    method boolean is_player_pass(Player player, int current_level) {
        if (current_level = 1) {
            return passLevel_1(player);
        }
        if (current_level = 2) {
            return passLevel_2(player);
        }
        if (current_level = 3) {
            return passLevel_3(player);
        }
        return true; // never executed
    }

    /** Check if player pass level 1 */
    method boolean passLevel_1(Player player) {
        var int player_bottom;
        var int player_x;

        let player_bottom = player.getBottom();
        let player_x = player.get_x();

        return ((player_bottom < 256) & (player_bottom > 246)) & ((player_x < 511) & (player_x > (448 + wall_width)));
    }

    /** Check if player pass level 2 */
    method boolean passLevel_2(Player player) {
        var int player_bottom;
        var int player_x;

        let player_bottom = player.getBottom();
        let player_x = player.get_x();

        return ((player_bottom < 256) & (player_bottom > 246)) & ((player_x < 511) & (player_x > 480));
    }

    /** Check if player pass level 3 */
    method boolean passLevel_3(Player player) {
        var int player_bottom;
        var int player_x;

        let player_bottom = player.getBottom();
        let player_x = player.get_x();

        return ((player_bottom < 256) & (player_bottom > 246)) & ((player_x < 511) & (player_x > 480));
    }

    /** Update the display of map */
    method void update(int current_level) {
        var Wall wall;
        var Wall block;
        var int i;

        var int x_left;
        var int x_right;
        var int x_velocity;

        let i = 0;
        if ((current_level = 1) | (current_level = 2)) {
            while (i < number_of_walls) {
                let wall = walls[i];
                do wall.draw();
                let i = i + 1;
            }
            return;
        }
        if (current_level = 3) {
            while (i < number_of_walls) {
                let wall = walls[i];
                do wall.draw();
                let i = i + 1;
            }

            let i = 0;
            while (i < number_of_blocks) {
                let block = blocks[i];
                let x_left = block.get_x_left();
                let x_right = block.get_x_right();
                let x_velocity = block.get_x_velocity();

                if (((x_left + x_velocity) < (128 + wall_width)) | ((x_right + x_velocity) > (511 - wall_width))) { // blocks reach the boundary
                    do block.set_x_velocity(-x_velocity);
                }
                else {
                    do block.move();
                }
                let i = i + 1;
            }
        }
        return;
    }
}