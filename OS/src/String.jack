// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
// codes created by danie

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int maxLen;
    field int currentLen;
    field Array charList;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let maxLen = maxLength;
        let currentLen = 0;
        if (maxLength > 0){
            let charList = Array.new(maxLength);
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return currentLen;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return charList[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let charList[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(currentLen < maxLen){
            let charList[currentLen] = c;
            let currentLen = currentLen + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(currentLen > 0){
            let currentLen = currentLen - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val;
        var int i;
        var char c;
        var boolean neg;
        var boolean isNonDigit;

        let i = 0;
        if(charAt(i) = 45){ // "-"
            let neg = true;
            let i = 1;
        }
        while(~isNonDigit & (i < currentLen)){
            let c = charAt(i);
            if ((c = 48) & (val = 0)){ // 0 at largest digit (viewed as 0)
                let isNonDigit = true;
            } 
            else{
                if ((c > 47) & (c < 58)){
                    let val = (10 * val) + (c - 48);
                }
                else{
                    let isNonDigit = true; 
                }
            }
            let i = i + 1;
        }
        if(neg){
            let val = -val;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int lastDigit;
        var int idx;
        var boolean neg;
        var int intLength;
        var int quotient;
        var Array chars;

        let chars = Array.new(6);

        if(val < 0){
            // let intLength = 6;
            let neg = true;
            let val = Math.abs(val);
        }

        // put each digit into temporary array
        if (val = 0){
            let chars[idx] = 48; // "0"
            let idx = idx + 1;
        }
        else{
            while (~(val = 0)){
                let quotient = val / 10;
                let lastDigit = val - (10 * quotient);

                let chars[idx] = (lastDigit + 48);
                let val = quotient;
                let idx = idx + 1;
            }
        }
        
        if(neg){
            let chars[idx] = 45; // "-"
            let idx = idx + 1;
        }

        let intLength = idx;
        let idx = idx - 1;
        // fill in each digit backwards
        while(~(idx < 0)){
            let charList[intLength - idx - 1] = chars[idx];
            let idx = idx - 1;
        }

        let currentLen = intLength;
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
